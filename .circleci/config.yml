version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  go: circleci/go@1.9.0
  kubernetes: circleci/kubernetes@1.3.1
  helm: circleci/helm@2.0.1

jobs:
  build_lint_tests:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - go/install:
          version: "1.21.4"
      - checkout
      - run:
          name: Print Go environment
          command: "go env"
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v6-{{ checksum "go.sum" }}
      - add_ssh_keys
      - run:
          name: Build Staking API Service
          command: make build
      - save_cache:
          key: go-mod-v6-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/.go_workspace/pkg/mod"
      # TODO: https://github.com/babylonchain/staking-api-service/issues/29
      # - run:
      #     name: Lint
      #     command: |
      #       curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.55.2
      #       ./bin/golangci-lint run
      - run:
          name: Run tests
          command: |
            make tests

  build_docker:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - checkout
      - add_ssh_keys
      - aws-ecr/build-image:
          push-image: false
          dockerfile: Dockerfile
          path: ./contrib/images/staking-api-service/
          build-path: ./
          tag: "$CIRCLE_SHA1,$CIRCLE_TAG"
          repo: "$CIRCLE_PROJECT_REPONAME"
          extra-build-args: "--secret id=sshKey,src=/home/circleci/.ssh/$DEPLOY_KEY_NAME"
      - run:
          name: Save Docker image to export it to workspace
          command: |
            docker save $(docker image ls --format '{{.Repository}}:{{.Tag}}') > /tmp/staking-api-service.tar
      - persist_to_workspace:
          root: /tmp
          paths:
            - staking-api-service.tar

  push_docker:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - add_ssh_keys
      - attach_workspace:
          at: /tmp
      - run:
          name: Load Docker image from workspace
          command: |
            docker load -i /tmp/staking-api-service.tar
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - aws-ecr/push-image:
          registry-id: AWS_ECR_REGISTRY_ID
          region: "$AWS_REGION"
          repo: "$CIRCLE_PROJECT_REPONAME"
          tag: "$CIRCLE_SHA1,$CIRCLE_TAG"

  deploy_staging:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - kubernetes/install-kubeconfig:
          kubeconfig: TESTNET_KUBECONFIG
      - helm/install-helm-client
      - run:
          name: Fetch and replace config placeholders from CircleCi env vars
          command: |
            HELM_VALUES=/home/circleci/project/.circleci/values-staging.yaml
            sed -i "s/USER/$RABBITMQ_USER_STAGING/g" $HELM_VALUES
            sed -i "s/PASSWORD/$RABBITMQ_PASSWORD_STAGING/g" $HELM_VALUES
            sed -i "s/API_STAGING_FQDN/$API_STAGING_FQDN/g" $HELM_VALUES
      - run:
          name: Perform a dry run of the new release
          command: |
            helm upgrade --install --debug --dry-run \
              -n $DEPLOY_STAGING_NAMESPACE \
              --values /home/circleci/project/.circleci/values-staging.yaml \
              --version $HELM_CHART_VERSION \
              --set deployment.version=$CIRCLE_SHA1 \
              staking-api-service $HELM_CHART_REPO
      - run:
          name: Release new service version in an atomic way
          command: |
            helm upgrade --install --debug --atomic --wait \
              -n $DEPLOY_STAGING_NAMESPACE --create-namespace \
              --values /home/circleci/project/.circleci/values-staging.yaml \
              --version $HELM_CHART_VERSION \
              --set deployment.version=$CIRCLE_SHA1 \
              staking-api-service $HELM_CHART_REPO

  redeploy_staging_mongodb:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - kubernetes/install-kubeconfig:
          kubeconfig: TESTNET_KUBECONFIG
      - kubernetes/install-kubectl
      - helm/install-helm-client
      - run:
          name: Tear down staging MongoDB and data
          command: |
            if [ -n "$(helm ls --all --short -n $MONGODB_STAGING_NAMESPACE | grep mongodb-staging)" ]
            then
              helm uninstall --wait --debug \
                -n $MONGODB_STAGING_NAMESPACE mongodb-staging
              kubectl delete pvc --wait \
                datadir-mongodb-staging-0 -n $MONGODB_STAGING_NAMESPACE
            fi
      - run:
          name: Clone production data from latest MongoDB primary node dump
          command: |
            PVC_MANIFEST=/home/circleci/project/.circleci/pvc-mongodb.yaml
            SNAPSHOT_DATE=$(date -d "yesterday" +"%Y%m%d")
            SNAPSHOT_NAME=datadir-mongodb-0-mongodb-staking-api-daily-${SNAPSHOT_DATE}1200
            sed -i "s/REPLACEME/$SNAPSHOT_NAME/g" $PVC_MANIFEST
            kubectl apply -f $PVC_MANIFEST
      - run:
          name: Boot standalone staging mongodb cluster with production data
          command: |
            helm upgrade --install --debug --atomic --wait \
              -n $MONGODB_STAGING_NAMESPACE --create-namespace \
              --values /home/circleci/project/.circleci/values-mongodb.yaml \
              --version $MONGODB_HELM_CHART_VERSION \
              mongodb-staging $MONGODB_HELM_CHART_REPO
      - run:
          name: Overwrite the existing replica set configuration
          command: |
            sleep 30s
            kubectl exec mongodb-staging-0 -n $MONGODB_STAGING_NAMESPACE \
            -- mongosh \
            --eval "rs.reconfig({'_id': 'rs0', 'members': [{'_id': 0, 'host': 'mongodb-staging-0.mongodb-staging-headless.mongodb-staking-api.svc.cluster.local:27017', 'priority': 10}]}, {force: true})"

  deploy_testnet:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - kubernetes/install-kubeconfig:
          kubeconfig: TESTNET_KUBECONFIG
      - helm/install-helm-client
      - run:
          name: Fetch and replace config placeholders from CircleCi env vars
          command: |
            HELM_VALUES=/home/circleci/project/.circleci/values-testnet.yaml
            sed -i "s/USER/$RABBITMQ_USER/g" $HELM_VALUES
            sed -i "s/PASSWORD/$RABBITMQ_PASSWORD/g" $HELM_VALUES
            sed -i "s/API_FQDN/$API_FQDN/g" $HELM_VALUES
      - run:
          name: Perform a dry run of the new release
          command: |
            helm upgrade --install --debug --dry-run \
              -n $DEPLOY_TESTNET_NAMESPACE \
              --values /home/circleci/project/.circleci/values-testnet.yaml \
              --version $HELM_CHART_VERSION \
              --set deployment.version=$CIRCLE_SHA1 \
              staking-api-service $HELM_CHART_REPO
      - run:
          name: Release new service version in an atomic way
          command: |
            helm upgrade --install --debug --atomic --wait \
              -n $DEPLOY_TESTNET_NAMESPACE --create-namespace \
              --values /home/circleci/project/.circleci/values-testnet.yaml \
              --version $HELM_CHART_VERSION \
              --set deployment.version=$CIRCLE_SHA1 \
              staking-api-service $HELM_CHART_REPO

  rollback_testnet:
    machine:
      image: ubuntu-2204:2024.01.1
      resource_class: large
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - kubernetes/install-kubeconfig:
          kubeconfig: TESTNET_KUBECONFIG
      - helm/install-helm-client
      - run:
          name: Rollback Helm Chart to previous release
          command: |
            helm rollback --cleanup-on-fail --force --recreate-pods --wait \
              --debug -n $DEPLOY_TESTNET_NAMESPACE staking-api-service

workflows:
  CICD:
    jobs:
      - require_approval_mongodb:
          type: approval
          filters:
            branches:
              only:
                - main
                - dev
      - redeploy_staging_mongodb:
          requires:
            - require_approval_mongodb
          filters:
            branches:
              only:
                - main
                - dev
      - build_lint_tests
      - build_docker:
          filters:
            tags:
              only: /.*/
      - push_docker:
          requires:
            - build_docker
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - main
                - dev
      - deploy_staging:
          requires:
            - push_docker
            - build_lint_tests
          filters:
            branches:
              only:
                - main
                - dev
      - require_approval_deploy:
          type: approval
          requires:
            - deploy_staging
          filters:
            branches:
              only:
                - main
                - dev
      - deploy_testnet:
          requires:
            - require_approval_deploy
          filters:
            branches:
              only:
                - main
                - dev
      - require_approval_rollback:
          type: approval
          requires:
            - deploy_testnet
          filters:
            branches:
              only:
                - main
                - dev
      - rollback_testnet:
          requires:
            - require_approval_rollback
          filters:
            branches:
              only:
                - main
                - dev
